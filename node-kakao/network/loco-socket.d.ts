/// <reference types="node" />
import { LocoPacketWriter } from "../packet/loco-packet-writer";
import { LocoPacketReader } from "../packet/loco-packet-reader";
import * as net from "net";
import { EventEmitter } from "events";
import { LocoResponsePacket, LocoRequestPacket } from "../packet/loco-packet-base";
export declare abstract class LocoSocket<T extends net.Socket> extends EventEmitter {
    private socket;
    private host;
    private port;
    private connected;
    private keepAlive;
    private packetWriter;
    private packetReader;
    private packetMap;
    constructor(host: string, port: number, keepAlive?: boolean, packetWriter?: LocoPacketWriter, packetReader?: LocoPacketReader);
    protected abstract createSocketConnection(host: string, port: number, callback: () => void): T;
    get Host(): string;
    get Port(): number;
    get Socket(): T | null;
    get Connected(): boolean;
    get Writer(): LocoPacketWriter;
    get Reader(): LocoPacketReader;
    get KeepAlive(): boolean;
    set KeepAlive(flag: boolean);
    connect(): Promise<boolean>;
    protected pipeTranformation(socket: net.Socket): void;
    protected onConnect(): void;
    protected onConnected(): void;
    disconnect(): boolean;
    protected onDisconnect(): void;
    protected onDisconnected(): void;
    protected connectionError(e: any): void;
    protected connectionEnded(buffer: Buffer): void;
    packetReceived(packetId: number, packet: LocoResponsePacket): void;
    protected structPacketToBuffer(packet: LocoRequestPacket): Buffer;
    sendPacket(packet: LocoRequestPacket): Promise<boolean>;
    sendBuffer(buffer: Buffer): Promise<boolean>;
    protected abstract onEnd(buffer: Buffer): void;
    protected abstract onError(e: any): void;
    on(event: 'packet' | string, listener: (packetId: number, packet: LocoResponsePacket, reqPacket?: LocoRequestPacket) => void): this;
    on(event: 'disconnected' | string, listener: () => void): this;
    once(event: 'packet' | string, listener: (packetId: number, packet: LocoResponsePacket, reqPacket?: LocoRequestPacket) => void): this;
    once(event: 'disconnected' | string, listener: () => void): this;
}
