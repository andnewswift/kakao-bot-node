/// <reference types="node" />
import { LocoPacketHandler, TalkClient, LocoRequestPacket, LocoResponsePacket, Long } from "..";
import { LocoManager, BookingData, CheckinData } from "../loco/loco-manager";
import { EventEmitter } from "events";
import { PacketMessageRes } from "../packet/packet-message";
import { PacketLoginRes } from "../packet/packet-login";
import { PacketKickoutRes } from "../packet/packet-kickout";
import { PacketNewMemberRes } from "../packet/packet-new-member";
import { PacketLeftRes, PacketLeaveRes, PacketLeaveReq } from "../packet/packet-leave";
import { PacketChanJoinRes } from "../packet/packet-chan-join";
import { PacketMessageReadRes } from "../packet/packet-message-read";
import { PacketSyncJoinOpenchatRes } from "../packet/packet-sync-join-openchat";
import { PacketDeleteMemberRes } from "../packet/packet-delmem";
import { PacketKickMemberRes } from "../packet/packet-kick-member";
import { PacketLinkKickedRes } from "../packet/packet-link-kicked";
import { PacketJoinLinkRes } from "../packet/packet-join-link";
import { PacketSyncMemberTypeRes } from "../packet/packet-sync-member-type";
import { PacketSyncProfileRes } from "../packet/packet-sync-profile";
import { PacketSyncDeleteMessageRes } from "../packet/packet-sync-delete-message";
export declare class NetworkManager {
    private client;
    private cachedBookingData;
    private cachedCheckinData;
    private latestCheckinReq;
    private handler;
    private locoManager;
    constructor(client: TalkClient);
    protected createPacketHandler(): TalkPacketHandler;
    get Client(): TalkClient;
    get LocoManager(): LocoManager;
    get NeedReLogin(): boolean;
    get Connected(): boolean;
    get Logon(): boolean;
    protected getCachedBooking(forceRecache?: boolean): Promise<BookingData>;
    protected getCachedCheckin(userId: Long, forceRecache?: boolean): Promise<CheckinData>;
    locoLogin(deviceUUID: string, userId: Long, accessToken: string): Promise<PacketLoginRes>;
    logout(): Promise<void>;
    disconnect(): Promise<void>;
    sendPacket(packet: LocoRequestPacket): Promise<boolean>;
    requestPacketRes<T extends LocoResponsePacket>(packet: LocoRequestPacket): Promise<T>;
}
export declare class TalkPacketHandler extends EventEmitter implements LocoPacketHandler {
    private networkManager;
    private kickReason;
    constructor(networkManager: NetworkManager);
    get NetworkManager(): NetworkManager;
    get Client(): TalkClient;
    get ChatManager(): import("../talk/chat/chat-manager").ChatManager;
    get ChannelManager(): import("../talk/channel/channel-manager").ChannelManager;
    get UserManager(): import("../talk/user/user-manager").UserManager;
    onRequest(packetId: number, packet: LocoRequestPacket): void;
    onResponse(packetId: number, packet: LocoResponsePacket, reqPacket?: LocoRequestPacket): void;
    onDisconnected(): void;
    onMessagePacket(packet: PacketMessageRes): Promise<void>;
    onMessageRead(packet: PacketMessageReadRes): Promise<void>;
    onNewMember(packet: PacketNewMemberRes): Promise<void>;
    syncMessageDelete(packet: PacketSyncDeleteMessageRes): Promise<void>;
    onChannelLeft(packet: PacketLeftRes): Promise<void>;
    onChannelLeave(packet: PacketLeaveRes, reqPacket?: PacketLeaveReq): Promise<void>;
    onLinkKicked(packet: PacketLinkKickedRes): Promise<void>;
    onChannelJoin(packet: PacketChanJoinRes): Promise<void>;
    onOpenChannelJoin(packet: PacketJoinLinkRes): Promise<void>;
    syncOpenChannelJoin(packet: PacketSyncJoinOpenchatRes): Promise<void>;
    syncMemberTypeChange(packet: PacketSyncMemberTypeRes): Promise<void>;
    syncProfileUpdate(packet: PacketSyncProfileRes): Promise<void>;
    onOpenChannelKick(packet: PacketKickMemberRes): Promise<void>;
    onMemberDelete(packet: PacketDeleteMemberRes): Promise<void>;
    onLocoKicked(packet: PacketKickoutRes): void;
}
