/// <reference types="node" />
import { ChatUser } from "../user/chat-user";
import { Long } from "bson";
import { ChannelType } from "../chat/channel-type";
import { EventEmitter } from "events";
import { Chat } from "../chat/chat";
import { MessageTemplate } from "../chat/template/message-template";
import { OpenLinkStruct } from "../struct/open-link-struct";
import { ChatContent } from "../chat/attachment/chat-attachment";
import { ChatFeed } from "../chat/chat-feed";
import { ChannelInfo, OpenChannelInfo } from "./channel-info";
import { TalkClient } from "../../talk-client";
import { OpenMemberType } from "../open/open-link-type";
export declare class ChatChannel extends EventEmitter {
    private client;
    private id;
    private type;
    static readonly INFO_UPDATE_INTERVAL: number;
    private lastChat;
    private readonly channelInfo;
    constructor(client: TalkClient, id: Long, type: ChannelType);
    protected createChannelInfo(): ChannelInfo;
    get Client(): TalkClient;
    get LastChat(): Chat | null;
    get Id(): Long;
    get Type(): ChannelType;
    getChannelInfo(forceUpdate?: boolean): Promise<ChannelInfo>;
    chatReceived(chat: Chat): void;
    markChannelRead(): Promise<void>;
    sendText(...textFormat: (string | ChatContent)[]): Promise<Chat>;
    sendRichFeed(text: String): Promise<Chat>;
    sendTemplate(template: MessageTemplate): Promise<Chat>;
    leave(block?: boolean): Promise<boolean>;
    isOpenChat(): boolean;
    on(event: 'message', listener: (chat: Chat) => void): this;
    on(event: 'join', listener: (newUser: ChatUser, feed: ChatFeed) => void): this;
    on(event: 'left', listener: (leftUser: ChatUser, feed: ChatFeed) => void): this;
    once(event: 'message', listener: (chat: Chat) => void): this;
    once(event: 'join', listener: (newUser: ChatUser, feed: ChatFeed) => void): this;
    once(event: 'left', listener: (leftUser: ChatUser, feed: ChatFeed) => void): this;
}
export declare class OpenChatChannel extends ChatChannel {
    private linkId;
    private openToken;
    constructor(client: TalkClient, channelId: Long, type: ChannelType, linkId: Long, openToken: number);
    protected createChannelInfo(): OpenChannelInfo;
    getChannelInfo(forceUpdate?: boolean): Promise<OpenChannelInfo>;
    get LinkId(): Long;
    get OpenToken(): number;
    isOpenChat(): boolean;
    kickMember(user: ChatUser): Promise<boolean>;
    kickMemberId(userId: Long): Promise<boolean>;
    deleteLink(): Promise<boolean>;
    hideChat(chat: Chat): Promise<boolean>;
    hideChatId(logId: Long): Promise<boolean>;
    changeToMainProfile(): Promise<boolean>;
    changeToKakaoProfile(nickname: string, profilePath: string): Promise<boolean>;
    changeToLinkProfile(profileLinkId: Long): Promise<boolean>;
    setOpenMemberType(user: ChatUser, memberType: OpenMemberType): Promise<boolean>;
    setOpenMemberTypeId(userId: Long, memberType: OpenMemberType): Promise<boolean>;
    getOpenProfile(): Promise<OpenLinkStruct>;
}
