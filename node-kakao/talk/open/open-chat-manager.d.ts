import { OpenLinkStruct } from "../struct/open-link-struct";
import { Long } from "bson";
import { TalkClient } from "../../talk-client";
import { AsyncIdStore } from "../../store/store";
import { OpenChatChannel } from "../channel/chat-channel";
import { ChatUser } from "../user/chat-user";
import { OpenchatProfileType, OpenMemberType } from "./open-link-type";
export declare class OpenChatManager extends AsyncIdStore<OpenLinkStruct> {
    private client;
    private static readonly LINK_REGEX;
    private clientLinkIdList;
    constructor(client: TalkClient);
    get Client(): TalkClient;
    get NetworkManager(): import("../../network/network-manager").NetworkManager;
    get ClientUser(): import("../user/chat-user").ClientChatUser;
    get ClientLinkList(): Long[];
    isClientLink(id: Long): boolean;
    fetchInfoFromIdList(linkId: Long[]): Promise<OpenLinkStruct[]>;
    fetchInfoFromURL(openLinkURL: string): Promise<OpenLinkStruct | null>;
    protected fetchValue(key: Long): Promise<OpenLinkStruct>;
    requestClientProfile(): Promise<OpenLinkStruct[]>;
    initOpenSession(): Promise<void>;
    getLinkOwner(linkId: Long): Promise<ChatUser>;
    kickMember(channel: OpenChatChannel, userId: Long): Promise<boolean>;
    deleteLink(linkId: Long): Promise<boolean>;
    hideChat(channel: OpenChatChannel, logId: Long): Promise<boolean>;
    updateOpenMemberTypeList(channel: OpenChatChannel, idTypeSet: Map<Long, OpenMemberType>): Promise<boolean>;
    setOpenMemberType(channel: OpenChatChannel, userId: Long, type: OpenMemberType): Promise<boolean>;
    joinOpenLink(linkId: Long, profileType: OpenchatProfileType.MAIN, passcode?: string): Promise<OpenChatChannel | null>;
    joinOpenLink(linkId: Long, profileType: OpenchatProfileType.KAKAO_ANON, passcode: string, nickname: string, profilePath: string): Promise<OpenChatChannel | null>;
    joinOpenLink(linkId: Long, profileType: OpenchatProfileType.OPEN_PROFILE, passcode: string, profileLinkId: Long): Promise<OpenChatChannel | null>;
    changeProfile(channel: OpenChatChannel, profileType: OpenchatProfileType.MAIN): Promise<boolean>;
    changeProfile(channel: OpenChatChannel, profileType: OpenchatProfileType.KAKAO_ANON, nickname: string, profilePath: string): Promise<boolean>;
    changeProfile(channel: OpenChatChannel, profileType: OpenchatProfileType.OPEN_PROFILE, profileLinkId: Long): Promise<boolean>;
}
